package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"encoding/json"
	"fmt"
	rand "math/rand/v2"
	"rxw1/logging"
	"rxw1/model"
	"time"

	nats "github.com/nats-io/nats.go"
	ulid "github.com/oklog/ulid/v2"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, productID string, qty int32) (*model.Order, error) {
	ctx = logging.With(ctx, "productID", productID)
	logging.From(ctx).Info("[mutationResolver] CreateOrder")

	event := map[string]any{
		"id":        ulid.Make().String(),
		"eventID":   ulid.Make().String(),
		"productID": productID,
		"qty":       qty,
		"createdAt": time.Now().UTC().Format(time.RFC3339),
	}

	b, err := json.Marshal(event)
	if err != nil {
		logging.From(ctx).Error("failed to marshal event", "error", err)
		return nil, err
	}

	time.Sleep(time.Duration(rand.IntN(500)) * time.Millisecond)

	if err := r.NC.Publish("order.created", b); err != nil {
		logging.From(ctx).Error("failed to publish event", "error", err)
		return nil, err
	}

	order := &model.Order{
		ID:        event["id"].(string),
		Qty:       event["qty"].(int32),
		ProductID: event["productID"].(string),
		EventID:   event["eventID"].(string),
		CreatedAt: event["createdAt"].(string),
	}

	logging.From(ctx).Info("order created", "order", order)
	return order, nil
}

// CancelOrder is the resolver for the cancelOrder field.
func (r *mutationResolver) CancelOrder(ctx context.Context, orderID string) (*model.Order, error) {
	ctx = logging.With(ctx)

	logging.From(ctx).Info("[mutationResolver] CancelOrder", "orderID", orderID)

	event := map[string]any{
		"id":        orderID,
		"eventID":   ulid.Make().String(),
		"createdAt": time.Now().UTC().Format(time.RFC3339),
	}

	b, err := json.Marshal(event)
	if err != nil {
		logging.From(ctx).Error("failed to marshal event", "error", err)
		return nil, err
	}

	time.Sleep(time.Duration(rand.IntN(500)) * time.Millisecond)

	if err := r.NC.Publish("order.canceled", b); err != nil {
		logging.From(ctx).Error("failed to publish event", "error", err)
		return nil, err
	}

	order := &model.Order{
		ID:        event["id"].(string),
		EventID:   event["eventID"].(string),
		CreatedAt: event["createdAt"].(string),
	}

	logging.From(ctx).Info("order canceled", "order", order)
	return order, nil
}

// EnableCache is the resolver for the enableCache field.
func (r *mutationResolver) EnableCache(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: EnableCache - enableCache"))
}

// DisableCache is the resolver for the disableCache field.
func (r *mutationResolver) DisableCache(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: DisableCache - disableCache"))
}

// ClearCache is the resolver for the clearCache field.
func (r *mutationResolver) ClearCache(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: ClearCache - clearCache"))
}

// EnableThrottling is the resolver for the enableThrottling field.
func (r *mutationResolver) EnableThrottling(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: EnableThrottling - enableThrottling"))
}

// DisableThrottling is the resolver for the disableThrottling field.
func (r *mutationResolver) DisableThrottling(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: DisableThrottling - disableThrottling"))
}

// CurrentTime is the resolver for the currentTime field.
func (r *queryResolver) CurrentTime(ctx context.Context) (*model.Time, error) {
	panic(fmt.Errorf("not implemented: CurrentTime - currentTime"))
}

// IsCacheEnabled is the resolver for the isCacheEnabled field.
func (r *queryResolver) IsCacheEnabled(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: IsCacheEnabled - isCacheEnabled"))
}

// IsThrottlingEnabled is the resolver for the isThrottlingEnabled field.
func (r *queryResolver) IsThrottlingEnabled(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: IsThrottlingEnabled - isThrottlingEnabled"))
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	ctx = logging.With(ctx)
	logging.From(ctx).Info("[queryResolver] Orders")

	msg, err := r.NC.Request("orders.all", nil, 2*time.Second)
	if err != nil {
		logging.From(ctx).Error("failed to request orders", "subject", "orders.all", "error", err)
		return nil, err
	}

	var orders []*model.Order
	if err := json.Unmarshal(msg.Data, &orders); err != nil {
		logging.From(ctx).Error("failed to unmarshal orders", "error", err)
		return nil, err
	}

	logging.From(ctx).Info("fetched orders", "count", len(orders))
	return orders, nil
}

// OrderByID is the resolver for the orderById field.
func (r *queryResolver) OrderByID(ctx context.Context, orderID string) (*model.Order, error) {
	ctx = logging.With(ctx, "orderID", orderID)
	logging.From(ctx).Info("[queryResolver] OrderByID")

	msg, err := r.NC.Request("orders.get", []byte(orderID), 2*time.Second)
	if err != nil {
		logging.From(ctx).Error("failed to request order", "subject", "orders.get", "error", err)
		return nil, err
	}

	var order model.Order
	if err := json.Unmarshal(msg.Data, &order); err != nil {
		logging.From(ctx).Error("failed to unmarshal order", "error", err)
		return nil, err
	}

	logging.From(ctx).Info("fetched order", "order", order)
	return &order, nil
}

// OrdersByUserID is the resolver for the ordersByUserId field.
func (r *queryResolver) OrdersByUserID(ctx context.Context, userID string) ([]*model.Order, error) {
	ctx = logging.With(ctx, "userID", userID)
	logging.From(ctx).Info("[queryResolver] OrdersByUserID")

	msg, err := r.NC.Request("orders.by_user", []byte(userID), 2*time.Second)
	if err != nil {
		logging.From(ctx).Error("failed to request orders", "subject", "orders.by_user", "error", err)
		return nil, err
	}

	var orders []*model.Order
	if err := json.Unmarshal(msg.Data, &orders); err != nil {
		logging.From(ctx).Error("failed to unmarshal orders", "error", err)
		return nil, err
	}

	logging.From(ctx).Info("fetched orders", "count", len(orders))
	return orders, nil
}

// Orders is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	ctx = logging.With(ctx)
	logging.From(ctx).Info("[queryResolver] Products")

	msg, err := r.NC.Request("products.all", nil, 2*time.Second)
	if err != nil {
		logging.From(ctx).Error("failed to request products", "subject", "products.all", "error", err)
		return nil, err
	}

	var products []*model.Product
	if err := json.Unmarshal(msg.Data, &products); err != nil {
		logging.From(ctx).Error("failed to unmarshal products", "error", err)
		return nil, err
	}

	logging.From(ctx).Info("fetched products", "count", len(products))
	return products, nil
}

// ProductByID is the resolver for the productById field.
func (r *queryResolver) ProductByID(ctx context.Context, productID string) (*model.Product, error) {
	ctx = logging.With(ctx, "productID", productID)

	logging.From(ctx).Info("[queryResolver] ProductByID")

	useCache := r.FF.RedisEnabled(ctx)
	if useCache {
		if s, err := r.RC.Get(ctx, "product:"+productID); err == nil {
			var p model.Product
			if json.Unmarshal([]byte(s), &p) == nil {
				return &p, nil
			}
		}
	}

	msg, err := r.NC.Request("products.get", []byte(productID), 2*time.Second)
	if err != nil {
		logging.From(ctx).Error("failed to request product", "subject", "products.get", "error", err)
		return nil, err
	}

	var p model.Product
	if err := json.Unmarshal(msg.Data, &p); err != nil {
		logging.From(ctx).Error("failed to unmarshal product", "error", err)
		return nil, err
	}

	logging.From(ctx).Info("fetched product", "product", p)

	return &p, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, userID string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UserByID - userById"))
}

// LastOrderCreated is the resolver for the lastOrderCreated field.
func (r *subscriptionResolver) LastOrderCreated(ctx context.Context) (<-chan *model.Order, error) {
	ctx = logging.With(ctx)
	logging.From(ctx).Info("[subscriptionResolver] LastOrderCreated")
	ch := make(chan *model.Order, 8) // buffered to avoid blocking NATS callback

	sub, err := r.NC.Subscribe("order.created", func(m *nats.Msg) {
		var o model.Order
		if err := json.Unmarshal(m.Data, &o); err != nil {
			logging.From(ctx).Error("failed to unmarshal order", "error", err)
			return
		}
		select {
		case ch <- &o:
		case <-ctx.Done():
			return
		}
	})
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		_ = sub.Unsubscribe()
		close(ch)
	}()

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
