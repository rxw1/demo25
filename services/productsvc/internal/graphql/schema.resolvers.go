package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"encoding/json"
	"fmt"
	"rxw1/productsvc/internal/logging"
	"rxw1/productsvc/internal/model"
	"time"

	nats "github.com/nats-io/nats.go"
	ulid "github.com/oklog/ulid/v2"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, productID string, qty int32) (*model.Order, error) {
	ctx2 := logging.With(ctx, "productID", productID)
	logging.From(ctx2).Info("mutationResolver CreateOrder")

	event := map[string]any{
		"id":        ulid.Make().String(),
		"eventID":   ulid.Make().String(),
		"productID": productID,
		"qty":       qty,
		"createdAt": time.Now().UTC().Format(time.RFC3339),
	}

	b, err := json.Marshal(event)
	if err != nil {
		logging.From(ctx2).Error("failed to marshal event", "error", err)
		return nil, err
	}

	if err := r.NC.Publish("order.created", b); err != nil {
		logging.From(ctx2).Error("failed to publish event", "error", err)
		return nil, err
	}

	order := &model.Order{
		ID:        event["id"].(string),
		Qty:       event["qty"].(int32),
		ProductID: event["productID"].(string),
		EventID:   event["eventID"].(string),
		CreatedAt: event["createdAt"].(string),
	}

	logging.From(ctx2).Info("order created", "order", order)
	return order, nil
}

// ProductByID is the resolver for the productById field.
func (r *queryResolver) ProductByID(ctx context.Context, productID string) (*model.Product, error) {
	ctx2 := logging.With(ctx, "productID", productID)
	logging.From(ctx2).Info("query product by id")

	useCache := r.FF.RedisEnabled(ctx)
	if useCache {
		if s, err := r.RC.Get(ctx, "product:"+productID); err == nil {
			var p model.Product
			if json.Unmarshal([]byte(s), &p) == nil {
				return &p, nil
			}
		}
	}

	p, err := r.PG.GetProduct(ctx, productID)
	if err != nil {
		return nil, err
	}

	if useCache {
		b, _ := json.Marshal(p)
		_ = r.RC.Set(ctx, "product:"+productID, string(b), 5*time.Minute)
	}

	return p, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	ctx2 := logging.With(ctx)
	logging.From(ctx2).Info("query products")

	useCache := r.FF.RedisEnabled(ctx)
	if useCache {
		if s, err := r.RC.Get(ctx, "products:all"); err == nil {
			var p []*model.Product
			if json.Unmarshal([]byte(s), &p) == nil {
				return p, nil
			}
		}
	}

	rows, err := r.PG.GetProducts(ctx)
	if err != nil {
		return nil, err
	}

	if useCache {
		b, _ := json.Marshal(rows)
		_ = r.RC.Set(ctx, "products:all", string(b), 5*time.Minute)
	}

	logging.From(ctx2).Info("fetched products", "count", len(rows))
	return rows, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	ctx2 := logging.With(ctx)
	logging.From(ctx2).Info("query orders")

	msg, err := r.NC.Request("orders.all", nil, 2*time.Second)
	if err != nil {
		logging.From(ctx2).Error("failed to request orders", "subject", "orders.all", "error", err)
		return nil, err
	}

	var orders []*model.Order
	if err := json.Unmarshal(msg.Data, &orders); err != nil {
		logging.From(ctx2).Error("failed to unmarshal orders", "error", err)
		return nil, err
	}

	logging.From(ctx2).Info("fetched orders", "count", len(orders))
	return orders, nil
}

// GetPrice is the resolver for the getPrice field.
func (r *queryResolver) GetPrice(ctx context.Context, productID string) (int32, error) {
	ctx2 := logging.With(ctx, "productID", productID)
	logging.From(ctx2).Info("query get price")

	data := []byte(productID)
	msg, err := r.NC.Request("products.price", data, 2*time.Second)
	if err != nil {
		logging.From(ctx2).Error("failed to request price", "subject", "products.price", "error", err)
		return 0, err
	}

	var price int
	if err := json.Unmarshal(msg.Data, &price); err != nil {
		logging.From(ctx2).Error("failed to get price", "error", err)
		return 0, err
	}

	logging.From(ctx2).Info("fetched price", "price", price)
	return int32(price), nil
}

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *model.Time, error) {
	// panic(fmt.Errorf("not implemented: CurrentTime - currentTime"))

	ch := make(chan *model.Time)

	// You can (and probably should) handle your channels in a central place outside of `schema.resolvers.go`.
	// For this example we'll simply use a Goroutine with a simple loop.
	go func() {
		// Handle deregistration of the channel here. Note the `defer`
		defer close(ch)

		for {
			// In our example we'll send the current time every second.
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			// Prepare your object.
			currentTime := time.Now()
			t := &model.Time{
				UnixTime:  int32(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}

			// The subscription may have got closed due to the client disconnecting.
			// Hence we do send in a select block with a check for context cancellation.
			// This avoids goroutine getting blocked forever or panicking,
			select {
			case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
				fmt.Println("Subscription Closed")
				// Handle deregistration of the channel here. `close(ch)`
				return // Remember to return to end the routine.

			case ch <- t: // This is the actual send.
				// Our message went through, do nothing
			}
		}
	}()

	// We return the channel and no error.
	return ch, nil
}

// LastOrderCreated is the resolver for the lastOrderCreated field.
func (r *subscriptionResolver) LastOrderCreated(ctx context.Context) (<-chan *model.Order, error) {
	ctx2 := logging.With(ctx, "nats", "Start")
	ch := make(chan *model.Order)
	go func() {
		// Handle deregistration of the channel here. Note the `defer`
		// defer close(ch)

		r.NC.Subscribe("order.created", func(m *nats.Msg) {
			var o model.Order
			if err := json.Unmarshal(m.Data, &o); err != nil {
				logging.From(ctx2).Error("failed to unmarshal order", "error", err)
				return
			}

			select {
			// case <-ctx.Done():
			// 	fmt.Println("Subscription Closed")
			// 	return
			case ch <- &o:
				// ok
			}
		})
	}()
	return ch, nil
}

// OrdersByEvent is the resolver for the ordersByEvent field.
func (r *subscriptionResolver) OrdersByEvent(ctx context.Context, eventID string) (<-chan *model.Order, error) {
	panic(fmt.Errorf("not implemented: OrdersByEvent - ordersByEvent"))
}

// OrdersByOrderID is the resolver for the ordersByOrderId field.
func (r *subscriptionResolver) OrdersByOrderID(ctx context.Context, orderID string) (<-chan *model.Order, error) {
	panic(fmt.Errorf("not implemented: OrdersByOrderID - ordersByOrderId"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
