package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"encoding/json"
	"fmt"
	rand "math/rand/v2"
	"rxw1/logging"
	"rxw1/productsvc/internal/model"
	"time"

	nats "github.com/nats-io/nats.go"
	ulid "github.com/oklog/ulid/v2"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, productID string, qty int32) (*model.Order, error) {
	ctx = logging.With(ctx, "productID", productID)
	logging.From(ctx).Info("[mutationResolver] CreateOrder")

	event := map[string]any{
		"id":        ulid.Make().String(),
		"eventID":   ulid.Make().String(),
		"productID": productID,
		"qty":       qty,
		"createdAt": time.Now().UTC().Format(time.RFC3339),
	}

	b, err := json.Marshal(event)
	if err != nil {
		logging.From(ctx).Error("failed to marshal event", "error", err)
		return nil, err
	}

	time.Sleep(time.Duration(rand.IntN(500)) * time.Millisecond)

	if err := r.NC.Publish("order.created", b); err != nil {
		logging.From(ctx).Error("failed to publish event", "error", err)
		return nil, err
	}

	order := &model.Order{
		ID:        event["id"].(string),
		Qty:       event["qty"].(int32),
		ProductID: event["productID"].(string),
		EventID:   event["eventID"].(string),
		CreatedAt: event["createdAt"].(string),
	}

	logging.From(ctx).Info("order created", "order", order)
	return order, nil
}

// CancelOrder is the resolver for the cancelOrder field.
func (r *mutationResolver) CancelOrder(ctx context.Context, orderID string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CancelOrder - cancelOrder"))
}

// ProductByID is the resolver for the productById field.
func (r *queryResolver) ProductByID(ctx context.Context, productID string) (*model.Product, error) {
	ctx = logging.With(ctx, "productID", productID)
	logging.From(ctx).Info("[queryResolver] ProductByID")

	useCache := r.FF.RedisEnabled(ctx)
	if useCache {
		if s, err := r.RC.Get(ctx, "product:"+productID); err == nil {
			var p model.Product
			if json.Unmarshal([]byte(s), &p) == nil {
				return &p, nil
			}
		}
	}

	p, err := r.PG.GetProduct(ctx, productID)
	if err != nil {
		return nil, err
	}

	if useCache {
		b, _ := json.Marshal(p)
		_ = r.RC.Set(ctx, "product:"+productID, string(b), 5*time.Minute)
	}

	return p, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	ctx = logging.With(ctx)
	logging.From(ctx).Info("[queryResolver] Products")

	useCache := r.FF.RedisEnabled(ctx)
	if useCache {
		if s, err := r.RC.Get(ctx, "products:all"); err == nil {
			var p []*model.Product
			if json.Unmarshal([]byte(s), &p) == nil {
				return p, nil
			}
		}
	}

	rows, err := r.PG.GetProducts(ctx)
	if err != nil {
		return nil, err
	}

	if useCache {
		b, _ := json.Marshal(rows)
		_ = r.RC.Set(ctx, "products:all", string(b), 5*time.Minute)
	}

	logging.From(ctx).Info("fetched products", "count", len(rows))
	return rows, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	ctx = logging.With(ctx)
	logging.From(ctx).Info("[queryResolver] Orders")

	msg, err := r.NC.Request("orders.all", nil, 2*time.Second)
	if err != nil {
		logging.From(ctx).Error("failed to request orders", "subject", "orders.all", "error", err)
		return nil, err
	}

	var orders []*model.Order
	if err := json.Unmarshal(msg.Data, &orders); err != nil {
		logging.From(ctx).Error("failed to unmarshal orders", "error", err)
		return nil, err
	}

	logging.From(ctx).Info("fetched orders", "count", len(orders))
	return orders, nil
}

// GetPrice is the resolver for the getPrice field.
func (r *queryResolver) GetPrice(ctx context.Context, productID string) (int32, error) {
	ctx = logging.With(ctx, "productID", productID)
	logging.From(ctx).Info("[queryResolver] GetPrice")

	data := []byte(productID)
	msg, err := r.NC.Request("products.price", data, 2*time.Second)
	if err != nil {
		logging.From(ctx).Error("failed to request price", "subject", "products.price", "error", err)
		return 0, err
	}

	var price int
	if err := json.Unmarshal(msg.Data, &price); err != nil {
		logging.From(ctx).Error("failed to get price", "error", err)
		return 0, err
	}

	logging.From(ctx).Info("fetched price", "price", price)
	return int32(price), nil
}

// MyOrders is the resolver for the myOrders field.
func (r *subscriptionResolver) MyOrders(ctx context.Context) (<-chan *model.Order, error) {
	panic(fmt.Errorf("not implemented: MyOrders - myOrders"))
}

// LastOrderCreated is the resolver for the lastOrderCreated field.
func (r *subscriptionResolver) LastOrderCreated(ctx context.Context) (<-chan *model.Order, error) {
	ctx = logging.With(ctx)
	logging.From(ctx).Info("[subscriptionResolver] LastOrderCreated")
	ch := make(chan *model.Order, 8) // buffered to avoid blocking NATS callback

	sub, err := r.NC.Subscribe("order.created", func(m *nats.Msg) {
		var o model.Order
		if err := json.Unmarshal(m.Data, &o); err != nil {
			logging.From(ctx).Error("failed to unmarshal order", "error", err)
			return
		}
		select {
		case ch <- &o:
		case <-ctx.Done():
			return
		}
	})
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		_ = sub.Unsubscribe()
		close(ch)
	}()

	return ch, nil
}

// OrdersByEvent is the resolver for the ordersByEvent field.
func (r *subscriptionResolver) OrdersByEvent(ctx context.Context, eventID string) (<-chan *model.Order, error) {
	ctx = logging.With(ctx, "eventID", eventID)
	logging.From(ctx).Info("[subscriptionResolver] OrdersByEvent")
	ch := make(chan *model.Order, 8) // buffered to avoid blocking NATS callback

	sub, err := r.NC.Subscribe("order.created", func(m *nats.Msg) {
		var o model.Order
		if err := json.Unmarshal(m.Data, &o); err != nil {
			logging.From(ctx).Error("failed to unmarshal order", "error", err)
			return
		}
		if o.EventID != eventID {
			return
		}
		select {
		case ch <- &o:
		case <-ctx.Done():
			return
		}
	})
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		_ = sub.Unsubscribe()
		close(ch)
	}()

	return ch, nil
}

// OrdersByOrderID is the resolver for the ordersByOrderId field.
func (r *subscriptionResolver) OrdersByOrderID(ctx context.Context, orderID string) (<-chan *model.Order, error) {
	ctx = logging.With(ctx, "orderID", orderID)
	logging.From(ctx).Info("[subscriptionResolver] OrdersByOrderID")
	ch := make(chan *model.Order, 8) // buffered to avoid blocking NATS callback

	sub, err := r.NC.Subscribe("order.created", func(m *nats.Msg) {
		var o model.Order
		if err := json.Unmarshal(m.Data, &o); err != nil {
			logging.From(ctx).Error("failed to unmarshal order", "error", err)
			return
		}
		if o.ID != orderID {
			return
		}
		select {
		case ch <- &o:
		case <-ctx.Done():
			return
		}
	})
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		_ = sub.Unsubscribe()
		close(ch)
	}()

	return ch, nil
}

// OrdersByProductID is the resolver for the ordersByProductId field.
func (r *subscriptionResolver) OrdersByProductID(ctx context.Context, productID string) (<-chan *model.Order, error) {
	panic(fmt.Errorf("not implemented: OrdersByProductID - ordersByProductId"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *model.Time, error) {
	panic(fmt.Errorf("not implemented: CurrentTime - currentTime"))
}
*/
