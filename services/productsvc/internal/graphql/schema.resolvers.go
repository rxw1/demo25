package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"encoding/json"
	"fmt"
	"rxw1/logging"
	"rxw1/productsvc/internal/model"
	"time"

	nats "github.com/nats-io/nats.go"
)

// ClearCache is the resolver for the clearCache field.
func (r *mutationResolver) ClearCache(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: ClearCache - clearCache"))
}

// DisableCache is the resolver for the disableCache field.
func (r *mutationResolver) DisableCache(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: DisableCache - disableCache"))
}

// DisableThrottling is the resolver for the disableThrottling field.
func (r *mutationResolver) DisableThrottling(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: DisableThrottling - disableThrottling"))
}

// EnableCache is the resolver for the enableCache field.
func (r *mutationResolver) EnableCache(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: EnableCache - enableCache"))
}

// EnableThrottling is the resolver for the enableThrottling field.
func (r *mutationResolver) EnableThrottling(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: EnableThrottling - enableThrottling"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, productID string, qty int32) (*model.Order, error) {
	ctx = logging.With(ctx, "mutation", "CreateOrder", "productId", productID, "qty", qty)
	logging.From(ctx).Info("creating order")

	// Build an event payload to publish; ordersvc will materialize an ID
	evt := struct {
		ID        string `json:"id"`
		ProductID string `json:"productId"`
		Qty       int32  `json:"qty"`
		CreatedAt string `json:"createdAt"`
	}{
		ID:        "", // ordersvc will generate ID upon materialization
		ProductID: productID,
		Qty:       qty,
		CreatedAt: time.Now().UTC().Format(time.RFC3339),
	}

	b, _ := json.Marshal(evt)
	if err := r.NC.Publish("order.created", b); err != nil {
		logging.From(ctx).Error("failed to publish order.created", "error", err)
		return nil, err
	}

	// Return a minimal echo object for UX; createdAt now, no id until read back
	return &model.Order{
		ID:        "pending",
		ProductID: productID,
		Qty:       qty,
		CreatedAt: evt.CreatedAt,
	}, nil
}

// CurrentTime is the resolver for the currentTime field.
func (r *queryResolver) CurrentTime(ctx context.Context) (*model.Time, error) {
	panic(fmt.Errorf("not implemented: CurrentTime - currentTime"))
}

// GetPrice is the resolver for the getPrice field.
func (r *queryResolver) GetPrice(ctx context.Context, productID string) (int32, error) {
	ctx = logging.With(ctx, "productID", productID)
	logging.From(ctx).Info("[queryResolver] GetPrice")

	data := []byte(productID)
	msg, err := r.NC.Request("products.price", data, 2*time.Second)
	if err != nil {
		logging.From(ctx).Error("failed to request price", "subject", "products.price", "error", err)
		return 0, err
	}

	var price int
	if err := json.Unmarshal(msg.Data, &price); err != nil {
		logging.From(ctx).Error("failed to get price", "error", err)
		return 0, err
	}

	logging.From(ctx).Info("fetched price", "price", price)
	return int32(price), nil
}

// IsCacheEnabled is the resolver for the isCacheEnabled field.
func (r *queryResolver) IsCacheEnabled(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: IsCacheEnabled - isCacheEnabled"))
}

// IsThrottlingEnabled is the resolver for the isThrottlingEnabled field.
func (r *queryResolver) IsThrottlingEnabled(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: IsThrottlingEnabled - isThrottlingEnabled"))
}

// ProductByID is the resolver for the productById field.
func (r *queryResolver) ProductByID(ctx context.Context, productID string) (*model.Product, error) {
	ctx = logging.With(ctx, "productID", productID)
	logging.From(ctx).Info("[queryResolver] ProductByID")

	useCache := r.FF.RedisEnabled(ctx)
	if useCache {
		if s, err := r.RC.Get(ctx, "product:"+productID); err == nil {
			var p model.Product
			if json.Unmarshal([]byte(s), &p) == nil {
				return &p, nil
			}
		}
	}

	p, err := r.PG.GetProduct(ctx, productID)
	if err != nil {
		return nil, err
	}

	if useCache {
		b, _ := json.Marshal(p)
		_ = r.RC.Set(ctx, "product:"+productID, string(b), 5*time.Minute)
	}

	return p, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	ctx = logging.With(ctx)
	logging.From(ctx).Info("[queryResolver] Products")

	useCache := r.FF.RedisEnabled(ctx)
	if useCache {
		if s, err := r.RC.Get(ctx, "products:all"); err == nil {
			var p []*model.Product
			if json.Unmarshal([]byte(s), &p) == nil {
				return p, nil
			}
		}
	}

	rows, err := r.PG.GetProducts(ctx)
	if err != nil {
		return nil, err
	}

	if useCache {
		b, _ := json.Marshal(rows)
		_ = r.RC.Set(ctx, "products:all", string(b), 5*time.Minute)
	}

	logging.From(ctx).Info("fetched products", "count", len(rows))
	return rows, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	ctx = logging.With(ctx, "query", "Orders")
	logging.From(ctx).Info("requesting all orders via NATS")

	msg, err := r.NC.Request("orders.all", nil, 2*time.Second)
	if err != nil {
		logging.From(ctx).Error("failed to request orders", "error", err)
		return nil, err
	}
	type orderDoc struct {
		ID        string `json:"id"`
		ProductID string `json:"productId"`
		Qty       int32  `json:"qty"`
		CreatedAt string `json:"createdAt"`
	}
	var docs []orderDoc
	if err := json.Unmarshal(msg.Data, &docs); err != nil {
		logging.From(ctx).Error("failed to unmarshal orders", "error", err)
		return nil, err
	}
	out := make([]*model.Order, 0, len(docs))
	for _, d := range docs {
		out = append(out, &model.Order{ID: d.ID, ProductID: d.ProductID, Qty: d.Qty, CreatedAt: d.CreatedAt})
	}
	return out, nil
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, userID string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UserByID - userById"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// LastOrderCreated is the resolver for the lastOrderCreated field.
func (r *subscriptionResolver) LastOrderCreated(ctx context.Context) (<-chan *model.Order, error) {
	ctx = logging.With(ctx, "subscription", "LastOrderCreated")
	ch := make(chan *model.Order, 8)

	sub, err := r.NC.Subscribe("order.created", func(m *nats.Msg) {
		var e struct {
			ID        string `json:"id"`
			ProductID string `json:"productId"`
			Qty       int32  `json:"qty"`
			CreatedAt string `json:"createdAt"`
		}
		if err := json.Unmarshal(m.Data, &e); err != nil {
			logging.From(ctx).Error("failed to unmarshal order.created", "error", err)
			return
		}
		select {
		case ch <- &model.Order{ID: e.ID, ProductID: e.ProductID, Qty: e.Qty, CreatedAt: e.CreatedAt}:
		case <-ctx.Done():
		}
	})
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		_ = sub.Unsubscribe()
		close(ch)
	}()
	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
