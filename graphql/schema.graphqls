type Order {
  id: ID!
  qty: Int!
  productId: ID!
  eventId: String!
  createdAt: String!
  price: Int!
}

type User {
  id: ID!
  name: String!
}

type Product {
  id: ID!
  price: Int!
  name: String!
}

type Time {
  unixTime: Int!
  timeStamp: String!
}

type Query {
  currentTime: Time!

  isCacheEnabled: Boolean!
  isThrottlingEnabled: Boolean!

  orders: [Order!]! # orders.all
  orderById(orderId: ID!): Order
  ordersByUserId(userId: ID!): [Order!]!

  products: [Product!]!
  productById(productId: ID!): Product

  users: [User!]!
  userById(userId: ID!): User
}

# - Order (no !) = nullable. The field/mutation may legally return null.
# - Order! = non‑nullable. The schema promises a value — if the resolver
#   produces null, GraphQL raises an execution error and the null will "bubble"
#   up (possibly nulling the parent or the whole response).

type Mutation {
  createOrder(productId: ID!, qty: Int!): Order
  cancelOrder(orderId: ID!): Order

  enableCache: Boolean!
  disableCache: Boolean!
  clearCache: Boolean!

  enableThrottling: Boolean!
  disableThrottling: Boolean!
}

type Subscription {
  lastOrderCreated: Order!
}
